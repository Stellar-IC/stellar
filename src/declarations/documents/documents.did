type UpdateBlockUpdateOutputResult = 
 record {
   blockType: BlockType;
   content: BlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type UpdateBlockUpdateOutputError = variant {primaryKeyAttrNotFound;};
type UpdateBlockUpdateOutput = 
 variant {
   err: UpdateBlockUpdateOutputError;
   ok: UpdateBlockUpdateOutputResult;
 };
type UpdateBlockUpdateInput = 
 record {
   blockType: BlockType;
   content: BlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type UUID = vec nat8;
type Transaction = 
 variant {
   delete:
    record {
      position: NodeIdentifier;
      transactionType: variant {delete;};
    };
   insert:
    record {
      position: NodeIdentifier;
      transactionType: variant {insert;};
      value: NodeValue;
    };
 };
type Time = int;
type SortOrder = 
 record {
   direction: SortDirection;
   fieldName: text;
 };
type SortDirection = 
 variant {
   asc;
   desc;
 };
type ShareablePage = 
 record {
   blockType: BlockType;
   content: BlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type ShareableNode = 
 record {
   base: NodeBase;
   children: vec record {
                   NodeIndex;
                   ShareableNode;
                 };
   deletedAt: opt Time;
   identifier: NodeIdentifier;
   value: NodeValue;
 };
type ShareableBlockText = 
 record {
   allocationStrategies: vec record {
                               NodeDepth;
                               AllocationStrategy;
                             };
   boundary: NodeBoundary;
   rootNode: ShareableNode;
 };
type ShareableBlockProperties = 
 record {
   checked: opt bool;
   title: opt ShareableBlockText;
 };
type ShareableBlock = 
 record {
   blockType: BlockType;
   content: BlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type SaveEventUpdateOutputResult = null;
type SaveEventUpdateOutputError = 
 variant {
   anonymousUser;
   insufficientCycles;
 };
type SaveEventUpdateOutput = 
 variant {
   err: SaveEventUpdateOutputError;
   ok: SaveEventUpdateOutputResult;
 };
type SaveEventUpdateInputPayload = 
 record {
   block:
    record {
      blockType: BlockType;
      content: BlockContent;
      parent: opt UUID;
      properties: ShareableBlockProperties;
      uuid: UUID;
    };
   index: nat;
 };
type SaveEventUpdateInput = 
 variant {
   blockCreated:
    record {
      eventType: variant {blockCreated;};
      payload: SaveEventUpdateInputPayload;
    };
   blockRemoved:
    record {
      eventType: variant {blockRemoved;};
      payload: record {
                 blockExternalId: UUID;
                 parent: UUID;
               };
    };
   blockTypeChanged:
    record {
      eventType: variant {blockTypeChanged;};
      payload: record {
                 blockExternalId: UUID;
                 blockType: BlockType;
               };
    };
   blockUpdated:
    record {
      eventType: variant {blockUpdated;};
      payload: record {
                 blockExternalId: UUID;
                 transactions: vec Transaction;
               };
    };
 };
type Result_1 = 
 variant {
   err: variant {blockNotFound;};
   ok: ShareableBlock;
 };
type Result = 
 variant {
   err: variant {pageNotFound;};
   ok: ShareablePage;
 };
type PrimaryKey = nat;
type PaginatedResults = record {edges: vec Edge;};
type NodeValue = text;
type NodeIndex = nat16;
type NodeIdentifier = vec NodeIndex;
type NodeDepth = nat16;
type NodeBoundary = nat16;
type NodeBase = nat16;
type Edge = record {node: ShareablePage;};
type CreatePageUpdateOutputResult = 
 record {
   blockType: BlockType;
   content: BlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type CreatePageUpdateOutputError = 
 variant {
   anonymousUser;
   failedToCreate;
   inputTooLong;
   insufficientCycles;
   invalidBlockType;
 };
type CreatePageUpdateOutput = 
 variant {
   err: CreatePageUpdateOutputError;
   ok: CreatePageUpdateOutputResult;
 };
type CreatePageUpdateInput = 
 record {
   content: BlockContent;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type BlockType = 
 variant {
   heading1;
   heading2;
   heading3;
   page;
   paragraph;
 };
type BlockContent = vec UUID;
type AllocationStrategy = 
 variant {
   boundaryMinus;
   boundaryPlus;
 };
type AddBlockUpdateOutputResult = record {id: PrimaryKey;};
type AddBlockUpdateOutputError = null;
type AddBlockUpdateOutput = 
 variant {
   err: AddBlockUpdateOutputError;
   ok: AddBlockUpdateOutputResult;
 };
type AddBlockUpdateInput = 
 record {
   blockType: BlockType;
   content: BlockContent;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
service : {
  addBlock: (AddBlockUpdateInput) -> (AddBlockUpdateOutput);
  blockByUuid: (UUID) -> (Result_1) query;
  createPage: (CreatePageUpdateInput) -> (CreatePageUpdateOutput);
  page: (PrimaryKey) -> (Result) query;
  pageByUuid: (UUID) -> (Result) query;
  pages:
   (record {
      cursor: opt PrimaryKey;
      limit: opt nat;
      order: opt SortOrder;
    }) -> (PaginatedResults) query;
  saveEvent: (SaveEventUpdateInput) -> (SaveEventUpdateOutput);
  updateBlock: (UpdateBlockUpdateInput) -> (UpdateBlockUpdateOutput);
}
