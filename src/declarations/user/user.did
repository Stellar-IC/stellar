type WorkspaceId = principal;
type Username__1 = text;
type Username = text;
type UserProfile = 
 record {
   created_at: Time;
   updatedAt: Time;
   username: Username__1;
 };
type UserInitArgs = 
 record {
   capacity: nat;
   owner: principal;
 };
type User = 
 service {
   personalWorkspace: () -> (Result_1);
   profile: () -> (Result) query;
   updatePersonalWorkspaceCanisterSettings: (CanisterSettings) -> ();
   updateProfile: (ProfileInput) -> (Result);
   upgradePersonalWorkspace: () -> () oneway;
   upgradePersonalWorkspaceCanisterWasm: (blob) -> ();
   walletReceive: () -> (record {accepted: nat64;});
 };
type Time = int;
type Result_1 = 
 variant {
   err: variant {
          anonymousUser;
          insufficientCycles;
          unauthorized;
        };
   ok: WorkspaceId;
 };
type Result = 
 variant {
   err: variant {unauthorized;};
   ok: UserProfile;
 };
type ProfileInput = record {username: Username;};
type CanisterSettings = 
 record {
   compute_allocation: opt nat;
   controllers: opt vec principal;
   freezing_threshold: opt nat;
   memory_allocation: opt nat;
 };
service : (UserInitArgs) -> User
