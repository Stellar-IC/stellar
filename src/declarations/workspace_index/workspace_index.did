type WorkspaceOwner = principal;
type WorkspaceName = text;
type WorkspaceDescription = text;
type Workspace = 
 record {
   createdAt: Time;
   description: WorkspaceDescription;
   name: WorkspaceName;
   owner: WorkspaceOwner;
   updatedAt: Time;
   uuid: UUID;
 };
type UUID = vec nat8;
type Time = int;
type Result = 
 variant {
   err:
    variant {
      anonymousCaller;
      anonymousOwner;
      anonymousWorkspaceIndex;
      insufficientCycles;
      unauthorizedCaller;
    };
   ok: principal;
 };
type PaginatedResults = record {edges: vec Edge;};
type Edge = record {node: Workspace;};
service : {
  createWorkspace: (record {owner: principal;}) -> (Result);
  upgradeWorkspaceCanister: (principal) -> () oneway;
  walletBalance: () -> (nat);
  workspaceByUuid: (UUID) -> (Workspace);
  workspaces: (record {}) -> (PaginatedResults);
}
