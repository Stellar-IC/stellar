type WorkspaceDetailsItem = 
 record {
   id: principal;
   result: variant {
             found: WorkspaceDetails;
             notFound;
           };
 };
type WorkspaceDetailsByIdOutput = 
 variant {
   err: variant {workspaceNotFound;};
   ok: WorkspaceDetailsByIdOk;
 };
type WorkspaceDetailsByIdOk = vec WorkspaceDetailsItem;
type WorkspaceDetails = 
 record {
   canisterId: principal;
   name: text;
 };
type UpdateInformationRequest = record {
                                  metrics: opt CollectMetricsRequestType;};
type UpdateCallsAggregatedData = vec nat64;
type StatusResponse = 
 record {
   cycles: opt nat64;
   heap_memory_size: opt nat64;
   memory_size: opt nat64;
 };
type StatusRequest = 
 record {
   cycles: bool;
   heap_memory_size: bool;
   memory_size: bool;
 };
type Result_1 = 
 variant {
   err: variant {
          AnonymousOwner;
          InsufficientCycles;
          Unauthorized;
        };
   ok: principal;
 };
type Result = 
 variant {
   err: variant {unauthorized;};
   ok;
 };
type PubSubEvent = variant {
                     workspaceNameUpdated:
                      record {
                        name: text;
                        workspaceId: principal;
                      };};
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type Nanos = nat64;
type MetricsResponse = record {metrics: opt CanisterMetrics;};
type MetricsRequest = record {parameters: GetMetricsParameters;};
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type LogMessagesData = 
 record {
   message: text;
   timeNanos: Nanos;
 };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type GetLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   fromTimeNanos: opt Nanos;
 };
type GetLogMessagesFilter = 
 record {
   analyzeCount: nat32;
   messageContains: opt text;
   messageRegex: opt text;
 };
type GetLatestLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   upToTimeNanos: opt Nanos;
 };
type GetInformationResponse = 
 record {
   logs: opt CanisterLogResponse;
   metrics: opt MetricsResponse;
   status: opt StatusResponse;
   version: opt nat;
 };
type GetInformationRequest = 
 record {
   logs: opt CanisterLogRequest;
   metrics: opt MetricsRequest;
   status: opt StatusRequest;
   version: bool;
 };
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type CollectMetricsRequestType = 
 variant {
   force;
   normal;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterLogResponse = 
 variant {
   messages: CanisterLogMessages;
   messagesInfo: CanisterLogMessagesInfo;
 };
type CanisterLogRequest = 
 variant {
   getLatestMessages: GetLatestLogMessagesParameters;
   getMessages: GetLogMessagesParameters;
   getMessagesInfo;
 };
type CanisterLogMessagesInfo = 
 record {
   count: nat32;
   features: vec opt CanisterLogFeature;
   firstTimeNanos: opt Nanos;
   lastTimeNanos: opt Nanos;
 };
type CanisterLogMessages = 
 record {
   data: vec LogMessagesData;
   lastAnalyzedMessageTimeNanos: opt Nanos;
 };
type CanisterLogFeature = 
 variant {
   filterMessageByContains;
   filterMessageByRegex;
 };
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
service : {
  /// ***********************************************************************
  ///      * Updates
  ///      ************************************************************************
  createWorkspace: () -> (Result_1);
  /// * Returns canister information based on passed parameters.
  ///     * Called from browser.
  getCanistergeekInformation: (GetInformationRequest) ->
   (GetInformationResponse) query;
  handleWorkspaceEvents: (text, PubSubEvent) -> ();
  requestCycles: (nat) -> (record {accepted: nat64;});
  /// * Updates canister information based on passed parameters at current time.
  ///     * Called from browser or any canister "update" method.
  updateCanistergeekInformation: (UpdateInformationRequest) -> ();
  upgradeWorkspaces: (blob) -> (Result);
  /// ***********************************************************************
  ///      * Cycles Management
  ///      ************************************************************************
  walletReceive: () -> (record {accepted: nat64;});
  workspaceDetailsById: (vec principal) -> (WorkspaceDetailsByIdOutput) query;
}
