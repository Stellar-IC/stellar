type Workspace__1 = 
 record {
   createdAt: Time;
   description: WorkspaceDescription;
   name: WorkspaceName;
   owner: WorkspaceOwner;
   updatedAt: Time;
   uuid: UUID;
 };
type WorkspaceOwner = principal;
type WorkspaceName = text;
type WorkspaceInitData = 
 record {
   createdAt: Time;
   description: WorkspaceDescription;
   name: WorkspaceName;
   updatedAt: Time;
   uuid: UUID;
 };
type WorkspaceInitArgs = 
 record {
   capacity: nat;
   owner: principal;
 };
type WorkspaceDescription = text;
type Workspace = 
 service {
   addBlock: (AddBlockUpdateInput) -> (AddBlockUpdateOutput);
   blockByUuid: (UUID) -> (Result_1) query;
   blocksByPageUuid: (text) -> (List) query;
   createPage: (CreatePageUpdateInput) -> (CreatePageUpdateOutput);
   cyclesInformation: () -> (record {
                               balance: nat;
                               capacity: nat;
                             });
   deletePage: (DeletePageUpdateInput) -> (DeletePageUpdateOutput);
   getInitArgs: () -> (record {
                         capacity: nat;
                         owner: principal;
                       });
   getInitData: () ->
    (record {
       createdAt: Time;
       description: WorkspaceDescription;
       name: WorkspaceName;
       updatedAt: Time;
       uuid: UUID;
     });
   pageByUuid: (UUID) -> (Result) query;
   pages:
    (record {
       cursor: opt PrimaryKey__1;
       limit: opt nat;
       order: opt SortOrder;
     }) -> (PaginatedResults) query;
   saveEvents: (SaveEventTransactionUpdateInput) ->
    (SaveEventTransactionUpdateOutput);
   toObject: () -> (Workspace__1) query;
   updateBlock: (UpdateBlockUpdateInput) -> (UpdateBlockUpdateOutput);
   walletReceive: () -> (record {accepted: nat64;});
 };
type UpdateBlockUpdateOutputResult = 
 record {
   blockType: BlockType;
   content: ShareableBlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type UpdateBlockUpdateOutputError = variant {primaryKeyAttrNotFound;};
type UpdateBlockUpdateOutput = 
 variant {
   err: UpdateBlockUpdateOutputError;
   ok: UpdateBlockUpdateOutputResult;
 };
type UpdateBlockUpdateInput = 
 record {
   blockType: BlockType;
   content: ShareableBlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type UUID = vec nat8;
type TreeEvent = 
 variant {
   delete:
    record {
      position: NodeIdentifier;
      transactionType: variant {delete;};
    };
   insert:
    record {
      position: NodeIdentifier;
      transactionType: variant {insert;};
      value: NodeValue;
    };
 };
type Time = int;
type SortOrder = 
 record {
   direction: SortDirection;
   fieldName: text;
 };
type SortDirection = 
 variant {
   asc;
   desc;
 };
type ShareableNode = 
 record {
   base: NodeBase;
   children: vec record {
                   NodeIndex;
                   ShareableNode;
                 };
   deletedAt: opt Time;
   identifier: NodeIdentifier;
   value: NodeValue;
 };
type ShareableBlockText = 
 record {
   allocationStrategies: vec record {
                               NodeDepth;
                               AllocationStrategy;
                             };
   boundary: NodeBoundary;
   rootNode: ShareableNode;
 };
type ShareableBlockProperties__1 = 
 record {
   checked: opt bool;
   title: opt ShareableBlockText;
 };
type ShareableBlockProperties = 
 record {
   checked: opt bool;
   title: opt ShareableBlockText;
 };
type ShareableBlockContent = 
 record {
   allocationStrategies: vec record {
                               NodeDepth;
                               AllocationStrategy;
                             };
   boundary: NodeBoundary;
   rootNode: ShareableNode;
 };
type ShareableBlock = 
 record {
   blockType: BlockType;
   content: ShareableBlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type SaveEventTransactionUpdateOutputResult = null;
type SaveEventTransactionUpdateOutputError = 
 variant {
   anonymousUser;
   insufficientCycles;
 };
type SaveEventTransactionUpdateOutput = 
 variant {
   err: SaveEventTransactionUpdateOutputError;
   ok: SaveEventTransactionUpdateOutputResult;
 };
type SaveEventTransactionUpdateInput = record {
                                         transaction: BlockEventTransaction;};
type Result_1 = 
 variant {
   err: variant {blockNotFound;};
   ok: ShareableBlock;
 };
type Result = 
 variant {
   err: variant {pageNotFound;};
   ok: ShareableBlock;
 };
type PrimaryKey__2 = nat;
type PrimaryKey__1 = nat;
type PrimaryKey = nat;
type PaginatedResults = record {edges: vec Edge;};
type NodeValue = text;
type NodeIndex = nat16;
type NodeIdentifier = vec NodeIndex;
type NodeDepth = nat16;
type NodeBoundary = nat16;
type NodeBase = nat16;
type List = 
 opt record {
       ShareableBlock;
       List;
     };
type Edge = record {node: ShareableBlock;};
type DeletePageUpdateOutputResult = null;
type DeletePageUpdateOutputError = null;
type DeletePageUpdateOutput = 
 variant {
   err: DeletePageUpdateOutputError;
   ok: DeletePageUpdateOutputResult;
 };
type DeletePageUpdateInput = record {uuid: UUID;};
type CreatePageUpdateOutputResult = 
 record {
   blockType: BlockType;
   content: ShareableBlockContent;
   id: PrimaryKey;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
type CreatePageUpdateOutputError = 
 variant {
   anonymousUser;
   failedToCreate;
   inputTooLong;
   insufficientCycles;
   invalidBlockType;
 };
type CreatePageUpdateOutput = 
 variant {
   err: CreatePageUpdateOutputError;
   ok: CreatePageUpdateOutputResult;
 };
type CreatePageUpdateInput = 
 record {
   content: ShareableBlockContent;
   parent: opt UUID;
   properties: ShareableBlockProperties__1;
   uuid: UUID;
 };
type BlockUpdatedEvent = 
 variant {
   updateBlockType: BlockTypeUpdatedEvent;
   updateContent: BlockContentUpdatedEvent;
   updateParent: BlockParentUpdatedEvent;
   updatePropertyChecked: BlockProperyCheckedUpdatedEvent;
   updatePropertyTitle: BlockProperyTitleUpdatedEvent;
 };
type BlockTypeUpdatedEvent = 
 record {
   data: record {
           blockExternalId: UUID;
           blockType: BlockType;
         };
   user: principal;
   uuid: UUID;
 };
type BlockType = 
 variant {
   bulletedList;
   callout;
   code;
   heading1;
   heading2;
   heading3;
   numberedList;
   page;
   paragraph;
   quote;
   todoList;
   toggleHeading1;
   toggleHeading2;
   toggleHeading3;
   toggleList;
 };
type BlockProperyTitleUpdatedEvent = 
 record {
   data: record {
           blockExternalId: UUID;
           transaction: vec TreeEvent;
         };
   user: principal;
   uuid: UUID;
 };
type BlockProperyCheckedUpdatedEvent = 
 record {
   data: record {
           blockExternalId: UUID;
           checked: bool;
         };
   user: principal;
   uuid: UUID;
 };
type BlockParentUpdatedEvent = 
 record {
   data: record {
           blockExternalId: UUID;
           parentBlockExternalId: UUID;
         };
   user: principal;
   uuid: UUID;
 };
type BlockEventTransaction = vec BlockEvent;
type BlockEvent = 
 variant {
   blockCreated: BlockCreatedEvent;
   blockUpdated: BlockUpdatedEvent;
   "empty";
 };
type BlockCreatedEvent = 
 record {
   data:
    record {
      block: record {
               blockType: BlockType;
               parent: opt UUID;
               uuid: UUID;
             };
      index: nat;
    };
   user: principal;
   uuid: UUID;
 };
type BlockContentUpdatedEvent = 
 record {
   data: record {
           blockExternalId: UUID;
           transaction: vec TreeEvent;
         };
   user: principal;
   uuid: UUID;
 };
type AllocationStrategy = 
 variant {
   boundaryMinus;
   boundaryPlus;
 };
type AddBlockUpdateOutputResult = record {id: PrimaryKey__2;};
type AddBlockUpdateOutputError = null;
type AddBlockUpdateOutput = 
 variant {
   err: AddBlockUpdateOutputError;
   ok: AddBlockUpdateOutputResult;
 };
type AddBlockUpdateInput = 
 record {
   blockType: BlockType;
   content: ShareableBlockContent;
   parent: opt UUID;
   properties: ShareableBlockProperties;
   uuid: UUID;
 };
service : (WorkspaceInitArgs, WorkspaceInitData) -> Workspace
