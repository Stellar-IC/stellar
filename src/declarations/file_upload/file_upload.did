type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback:
                               func (StreamingCallbackToken) ->
                                (StreamingCallbackHttpResponse) query;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: vec nat8;
   token: opt StreamingCallbackToken;
 };
type Result_2 = 
 variant {
   err: variant {unauthorized;};
   ok: principal;
 };
type Result_1 = 
 variant {
   err: text;
   ok: record {url: text;};
 };
type Result = 
 variant {
   err: variant {unauthorized;};
   ok;
 };
type Key = text;
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type FileUpload = 
 service {
   createAssetCanister: () -> (Result_2);
   http_request: (HttpRequest) -> (HttpResponse);
   store: (record {
             content: vec nat8;
             content_type: text;
             key: Key;
           }) -> (Result_1);
   upgradeAssets: (blob) -> (Result);
 };
service : () -> FileUpload
